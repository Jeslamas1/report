Option Explicit

' ==== CONFIG ====
Private Const RAW_SHEET As String = "RawData"           ' your data sheet
Private Const WS_TMP As String = "~tmpPareto"           ' helper
Private Const WS_PARETO_TYPE As String = "Pareto_FailureType"
Private Const WS_PARETO_COMP As String = "Pareto_ComponentName"

' ==== ENTRY POINTS ====
Public Sub BuildPareto_FailureType(Optional ByVal monthKey As String = "")
    ' monthKey example: "2025-08" (matches your Column J values); "" = all months
    BuildParetoWeighted categoryHeader:="Failure Type", _
                        normalizeToFive:=True, _
                        chartSheetName:=WS_PARETO_TYPE, _
                        chartTitle:="Pareto - Failures by Failure Type", _
                        monthKey:=monthKey
End Sub

Public Sub BuildPareto_ComponentName(Optional ByVal monthKey As String = "")
    BuildParetoWeighted categoryHeader:="Component Name", _
                        normalizeToFive:=False, _
                        chartSheetName:=WS_PARETO_COMP, _
                        chartTitle:="Pareto - Failures by Component", _
                        monthKey:=monthKey
End Sub

' ==== CORE ====
Private Sub BuildParetoWeighted(ByVal categoryHeader As String, _
                                ByVal normalizeToFive As Boolean, _
                                ByVal chartSheetName As String, _
                                ByVal chartTitle As String, _
                                Optional ByVal monthKey As String = "")
    Dim ws As Worksheet: Set ws = ThisWorkbook.Worksheets(RAW_SHEET)
    Dim lastRow As Long, lastCol As Long
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    If lastRow < 2 Then
        MsgBox "No data rows found.", vbExclamation: Exit Sub
    End If
    
    ' Header locations (robust to column order; uses your names)
    Dim cDate As Long, cSFC As Long, cCCA As Long, cRes As Long, cType As Long
    Dim cPN As Long, cName As Long, cOp As Long, cCom As Long, cMonth As Long, cNumFails As Long
    cDate = FindHeaderCol(ws, "DateTested", 1, lastCol)
    cSFC = FindHeaderCol(ws, "SFC", 1, lastCol)
    cCCA = FindHeaderCol(ws, "CCA", 1, lastCol)
    cRes = FindHeaderCol(ws, "Result", 1, lastCol)
    cType = FindHeaderCol(ws, "Failure Type", 1, lastCol)     ' E
    cPN = FindHeaderCol(ws, "Component Part Number", 1, lastCol)
    cName = FindHeaderCol(ws, "Component Name", 1, lastCol)   ' G
    cOp = FindHeaderCol(ws, "Operation", 1, lastCol)
    cCom = FindHeaderCol(ws, "Comment", 1, lastCol)
    cMonth = FindHeaderCol(ws, "Month", 1, lastCol)           ' J
    cNumFails = FindHeaderCol(ws, "Number of Fails", 1, lastCol) ' K
    
    If cRes = 0 Or cMonth = 0 Or cNumFails = 0 Then
        MsgBox "Missing required headers (Result, Month, Number of Fails).", vbExclamation
        Exit Sub
    End If
    Dim cCat As Long
    If categoryHeader = "Failure Type" Then
        cCat = cType
    ElseIf categoryHeader = "Component Name" Then
        cCat = cName
    Else
        MsgBox "Unknown category header: " & categoryHeader, vbExclamation: Exit Sub
    End If
    
    Dim dict As Object: Set dict = CreateObject("Scripting.Dictionary")
    dict.CompareMode = 1 ' TextCompare
    Dim total As Double: total = 0
    
    ' For normalized failure type Pareto: seed fixed 5 buckets
    Dim buckets As Variant, i As Long
    If normalizeToFive Then
        buckets = Array("TBD:PART", "TBD", "PART", "OP ERROR", "WORKMANSHIP")
        For i = LBound(buckets) To UBound(buckets)
            dict(buckets(i)) = 0#
        Next i
    End If
    
    ' Tally weights (Number of Fails), exclude only explicit "Pass"
    Dim r As Long, resVal As String, catRaw As String, catKey As String, mKey As String
    Dim w As Double, cellVal As Variant
    For r = 2 To lastRow
        ' Month filter (optional)
        mKey = Trim$(CStr(ws.Cells(r, cMonth).Value))
        If (Len(monthKey) = 0) Or (LCase$(mKey) = LCase$(monthKey)) Then
            resVal = LCase$(Trim$(CStr(ws.Cells(r, cRes).Value)))
            If resVal <> "pass" Then
                catRaw = Trim$(CStr(ws.Cells(r, cCat).Value))
                If normalizeToFive Then
                    If Len(catRaw) = 0 Then catRaw = "TBD"
                    catKey = NormalizeToFive(catRaw)
                Else
                    If Len(catRaw) = 0 Then catKey = "(Unspecified)" Else catKey = catRaw
                End If
                ' weight from Number of Fails (K); blank -> 1
                cellVal = ws.Cells(r, cNumFails).Value
                If IsNumeric(cellVal) And Len(Trim$(cellVal)) > 0 Then
                    w = CDbl(cellVal)
                Else
                    w = 1#
                End If
                If Not dict.Exists(catKey) Then dict(catKey) = 0#
                dict(catKey) = dict(catKey) + w
                total = total + w
            End If
        End If
    Next r
    
    ' Dump to helper sheet and sort desc
    Dim wsTmp As Worksheet: Set wsTmp = GetOrAddSheet(WS_TMP)
    wsTmp.Cells.Clear
    wsTmp.Range("A1:E1").Value = Array("Category", "Count", "Percent", "CumPercent", "Rank")
    
    Dim keys As Variant, n As Long
    keys = dict.Keys: n = dict.Count
    If n = 0 Then
        wsTmp.Range("A2").Value = "No data to chart."
        BuildOrRefreshChart chartSheetName, chartTitle, wsTmp, 1
        Exit Sub
    End If
    
    ' Write unsorted
    For i = 0 To n - 1
        wsTmp.Cells(i + 2, 1).Value = CStr(keys(i))
        wsTmp.Cells(i + 2, 2).Value = CDbl(dict(keys(i)))
    Next i
    
    ' Sort by Count desc
    With wsTmp.Sort
        .SortFields.Clear
        .SortFields.Add Key:=wsTmp.Range("B2").Resize(n, 1), SortOn:=xlSortOnValues, Order:=xlDescending, DataOption:=xlSortNormal
        .SetRange wsTmp.Range("A1").Resize(n + 1, 2)
        .Header = xlYes
        .Apply
    End With
    
    ' Percent, cumulative, rank
    If total > 0 Then
        wsTmp.Range("C2").Resize(n, 1).FormulaR1C1 = "=RC[-1]/" & total
        wsTmp.Range("D2").Resize(n, 1).FormulaR1C1 = "=SUM(R2C3:RC[-1])"
    Else
        wsTmp.Range("C2:D" & n + 1).Value = 0
    End If
    wsTmp.Range("E2").Resize(n, 1).FormulaR1C1 = "=ROW()-1"
    wsTmp.Columns("A:E").AutoFit
    
    ' Build / refresh chart
    BuildOrRefreshChart chartSheetName, chartTitle, wsTmp, n
End Sub

' ==== CHART BUILDER ====
Private Sub BuildOrRefreshChart(ByVal chartSheetName As String, ByVal chartTitle As String, _
                                ByVal wsTmp As Worksheet, ByVal n As Long)
    Dim wsChart As Worksheet: Set wsChart = GetOrAddSheet(chartSheetName)
    wsChart.Cells.Clear
    
    Dim ch As ChartObject
    Set ch = wsChart.ChartObjects.Add(Left:=20, Top:=20, Width:=860, Height:=460)
    With ch.Chart
        .ChartType = xlColumnClustered
        .SetSourceData Source:=wsTmp.Range("A1").Resize(Application.Max(2, n + 1), 2)
        
        If n > 0 Then
            Dim sCum As Series
            Set sCum = .SeriesCollection.NewSeries
            sCum.Name = "Cumulative %"
            sCum.XValues = wsTmp.Range("A2").Resize(n, 1)
            sCum.Values = wsTmp.Range("D2").Resize(n, 1)
            sCum.ChartType = xlLine
            sCum.AxisGroup = xlSecondary
            
            With .Axes(xlValue, xlSecondary)
                .HasTitle = True
                .AxisTitle.Text = "Cumulative %"
                .MinimumScale = 0
                .MaximumScale = 1
                .TickLabels.NumberFormat = "0%"
            End With
        End If
        
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Text = "Weighted Fail Count"
        .HasTitle = True
        .ChartTitle.Text = chartTitle
        .Legend.Position = xlLegendPositionBottom
    End With
End Sub

' ==== NORMALIZATION (5 buckets) ====
Private Function NormalizeToFive(ByVal s As String) As String
    Dim t As String: t = LCase$(Trim$(s))
    t = Replace(t, vbTab, " ")
    Do While InStr(t, "  ") > 0: t = Replace(t, "  ", " "): Loop
    
    If (InStr(t, "tbd") > 0 And InStr(t, "part") > 0) Then
        NormalizeToFive = "TBD:PART"
    ElseIf t Like "*op error*" Or t Like "*operator error*" Or t Like "*op-error*" Then
        NormalizeToFive = "OP ERROR"
    ElseIf t Like "*workmanship*" Then
        NormalizeToFive = "WORKMANSHIP"
    ElseIf InStr(t, "tbd") > 0 Then
        NormalizeToFive = "TBD"
    ElseIf InStr(t, "part") > 0 Then
        NormalizeToFive = "PART"
    Else
        NormalizeToFive = "PART" ' fallback
    End If
End Function

' ==== HELPERS ====
Private Function FindHeaderCol(ByVal ws As Worksheet, ByVal headerText As String, _
                               ByVal headerRow As Long, ByVal lastCol As Long) As Long
    Dim c As Long
    For c = 1 To lastCol
        If LCase$(Trim$(CStr(ws.Cells(headerRow, c).Value))) = LCase$(headerText) Then
            FindHeaderCol = c: Exit Function
        End If
    Next c
    FindHeaderCol = 0
End Function

Private Function GetOrAddSheet(ByVal name As String) As Worksheet
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets(name)
    On Error GoTo 0
    If ws Is Nothing Then
        Set ws = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        ws.Name = name
    End If
    Set GetOrAddSheet = ws
End Function
