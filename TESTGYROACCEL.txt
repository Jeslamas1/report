#include "stm32f4xx_hal.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"
#include "string.h"
#include <stdio.h>
#include <stdbool.h>

#define ISM330DLC_I2C_ADDRESS (0x6A << 1) // Update address to match WHO_AM_I value
#define WHO_AM_I_REG 0x0F
#define CTRL1_XL 0x10
#define CTRL2_G 0x11
#define STATUS_REG 0x1E
#define OUTX_L_G 0x22
#define OUTX_L_XL 0x28

I2C_HandleTypeDef hi2c1;
extern USBD_HandleTypeDef hUsbDeviceFS;

char data[64] = "Motor Control Ready\n";
uint8_t buffer[64] = {0};
uint32_t lastUsbTransmitTime = 0;
uint16_t usbTransmitInterval = 500;
int16_t accel_offset[3];
int16_t gyro_offset[3];

void SystemClock_Config(void);
void GPIO_Init(void);
void ISM330DLC_Init(void);
void ISM330DLC_Reset(void);
void ISM330DLC_ReadAccelerometer(int16_t *accel_data);
void ISM330DLC_ReadGyroscope(int16_t *gyro_data);
void MX_USB_DEVICE_Init(void);
void I2C1_Init(void);
void CDC_Transmit_Data(char* data);
void Error_Handler(void);

int main(void) {
    // Initialize HAL, System Clock, and Peripherals
    HAL_Init();
    SystemClock_Config();
    GPIO_Init();
    I2C1_Init();
    MX_USB_DEVICE_Init();

    // Initialize the IMU
    ISM330DLC_Reset();
    ISM330DLC_Init();

    // USB Ready Message
    //char* initMsg = "USB Initialized. IMU Ready\n";
    //CDC_Transmit_Data(initMsg);

    int16_t accel_data[3] = {0};
    int16_t gyro_data[3] = {0};
    uint32_t lastSensorUpdate = 0;
    uint16_t sensorInterval = 1000; // Update interval (ms)

    while (1) {
        // Update IMU data every sensorInterval
        if (HAL_GetTick() - lastSensorUpdate >= sensorInterval) {
            uint8_t status = 0;

            // Debug: Attempt to read STATUS_REG
            HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, ISM330DLC_I2C_ADDRESS, STATUS_REG, 1, &status, 1, 100);
            if (ret == HAL_OK) {
                //char status_msg[64];
                //snprintf(status_msg, sizeof(status_msg), "STATUS_REG: 0x%02X\n", status);
                //CDC_Transmit_Data(status_msg);

                // Read data if available
                if (status & 0x01) {
                    ISM330DLC_ReadAccelerometer(accel_data);
                }
                if (status & 0x02) {
                    ISM330DLC_ReadGyroscope(gyro_data);
                }

                // Convert and send data
                float accel_g[3];
                float gyro_dps[3];
                accel_g[0] = accel_data[0] * 0.0599f * 0.001f;
                accel_g[1] = accel_data[1] * 0.0599f * 0.001f;
                accel_g[2] = accel_data[2] * 0.0599f * 0.001f;

                gyro_dps[0] = gyro_data[0] * 0.00424f;
                gyro_dps[1] = gyro_data[1] * 0.00424f;
                gyro_dps[2] = gyro_data[2] * 0.00424f;

                char imuData[256];
                snprintf(imuData, sizeof(imuData),
                         "Gyro (dps) X: %.2f, Y: %.2f, Z: %.2f, Accel (g) X: %.3f, Y: %.3f, Z: %.3f\n",
                         gyro_dps[0], gyro_dps[1], gyro_dps[2],
                         accel_g[0], accel_g[1], accel_g[2]);
                CDC_Transmit_Data(imuData);
            } else if (ret == HAL_TIMEOUT) {
                CDC_Transmit_Data("Error: I2C Read Timeout\n");
            } else {
                CDC_Transmit_Data("Error: I2C Read HAL_ERROR\n");
            }

            lastSensorUpdate = HAL_GetTick();
        }

        HAL_Delay(10);
    }
}

void ISM330DLC_Reset(void) {
    uint8_t reset_cmd = 0x01; // Reset command for CTRL3_C register
    if (HAL_I2C_Mem_Write(&hi2c1, ISM330DLC_I2C_ADDRESS, 0x12, 1, &reset_cmd, 1, 100) == HAL_OK) {
        CDC_Transmit_Data("IMU Reset Command Sent\n");
    } else {
        CDC_Transmit_Data("Error: Failed to send IMU Reset Command\n");
    }

    HAL_Delay(200); // Allow sufficient time for the IMU to reset
}

// IMU Initialization Function
void ISM330DLC_Init(void) {
    // Configure accelerometer (CTRL1_XL: 104 Hz ODR, ±2g range)
    uint8_t accel_config = 0x50; // ODR = 104 Hz, ±2g
    if (HAL_I2C_Mem_Write(&hi2c1, ISM330DLC_I2C_ADDRESS, CTRL1_XL, 1, &accel_config, 1, 100) != HAL_OK) {
        CDC_Transmit_Data("Error: Failed to configure CTRL1_XL\n");
        return;
    }

    // Configure gyroscope (CTRL2_G: 104 Hz ODR, 2000 dps range)
    uint8_t gyro_config = 0x50; // ODR = 104 Hz, 2000 dps
    if (HAL_I2C_Mem_Write(&hi2c1, ISM330DLC_I2C_ADDRESS, CTRL2_G, 1, &gyro_config, 1, 100) != HAL_OK) {
        CDC_Transmit_Data("Error: Failed to configure CTRL2_G\n");
        return;
    }

    // Configure CTRL6_C for accelerometer high-performance mode
    uint8_t ctrl6_c = 0x00; // XL_HM_MODE = 0 (High Performance)
    if (HAL_I2C_Mem_Write(&hi2c1, ISM330DLC_I2C_ADDRESS, 0x15, 1, &ctrl6_c, 1, 100) != HAL_OK) {
        CDC_Transmit_Data("Error: Failed to configure CTRL6_C\n");
        return;
    }

    // Configure CTRL7_G for gyroscope high-performance mode
    uint8_t ctrl7_g = 0x00; // G_HM_MODE = 0 (High Performance)
    if (HAL_I2C_Mem_Write(&hi2c1, ISM330DLC_I2C_ADDRESS, 0x16, 1, &ctrl7_g, 1, 100) != HAL_OK) {
        CDC_Transmit_Data("Error: Failed to configure CTRL7_G\n");
        return;
    }

    HAL_Delay(100); // Allow configuration to settle
    CDC_Transmit_Data("ISM330DLC Initialized Successfully\n");
}


void GPIO_Init(void) {
    __HAL_RCC_GPIOA_CLK_ENABLE();  // Enable GPIO clock

    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // Configure GPIO pins : PA2 PA3 (Motor Control Pins)
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    // Configure GPIO pin : PA0 (Button Pin)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}
void I2C1_Init(void) {
    __HAL_RCC_I2C1_CLK_ENABLE();  // Enable I2C1 clock

    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;  // 100 kHz
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;

    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
        Error_Handler();
    }
}


void ISM330DLC_ReadAccelerometer(int16_t *accel_data) {
    uint8_t accel_buffer[6];
    if (HAL_I2C_Mem_Read(&hi2c1, ISM330DLC_I2C_ADDRESS, OUTX_L_XL, 1, accel_buffer, 6, 100) == HAL_OK) {
        accel_data[0] = (int16_t)(accel_buffer[1] << 8 | accel_buffer[0]);
        accel_data[1] = (int16_t)(accel_buffer[3] << 8 | accel_buffer[2]);
        accel_data[2] = (int16_t)(accel_buffer[5] << 8 | accel_buffer[4]);
    } else {
        CDC_Transmit_Data("Error: Failed to read accelerometer\n");
    }
}

void ISM330DLC_ReadGyroscope(int16_t *gyro_data) {
    uint8_t gyro_buffer[6];
    if (HAL_I2C_Mem_Read(&hi2c1, ISM330DLC_I2C_ADDRESS, OUTX_L_G, 1, gyro_buffer, 6, 100) == HAL_OK) {
        gyro_data[0] = (int16_t)(gyro_buffer[1] << 8 | gyro_buffer[0]);
        gyro_data[1] = (int16_t)(gyro_buffer[3] << 8 | gyro_buffer[2]);
        gyro_data[2] = (int16_t)(gyro_buffer[5] << 8 | gyro_buffer[4]);
    } else {
        CDC_Transmit_Data("Error: Failed to read gyroscope\n");
    }
}

// Function to transmit data via USB CDC to PuTTY
void CDC_Transmit_Data(char* data) {
    while (CDC_Transmit_FS((uint8_t*)data, strlen(data)) == USBD_BUSY) {
        HAL_Delay(1);  // Wait until the USB buffer is free
    }
}

void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    // Configure the main internal regulator output voltage
    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    // Initializes the RCC Oscillators
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 16;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
    RCC_OscInitStruct.PLL.PLLQ = 7;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        // Initialization Error
        while(1);
    }

    // Initializes the CPU, AHB and APB buses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    {
        // Initialization Error
        while(1);
    }
}

void Error_Handler(void)
{
    // Error handling code (infinite loop or system reset)
    while(1)
    {
        // Optionally toggle an LED or other indicator
    }
}
